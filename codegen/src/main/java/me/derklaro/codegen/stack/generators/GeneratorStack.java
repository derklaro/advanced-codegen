/*
 * This file is part of codegen, licensed under the MIT License (MIT).
 *
 * Copyright (c) 2021 Pasqual Koschmieder and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package me.derklaro.codegen.stack.generators;

import javassist.CtClass;
import me.derklaro.codegen.generator.Generator;
import me.derklaro.codegen.stack.MutableStack;
import me.derklaro.codegen.stack.classes.ClassStack;
import org.jetbrains.annotations.NotNull;
import spoon.reflect.declaration.CtType;

/**
 * Represents a stack of class generators.
 */
public interface GeneratorStack extends MutableStack<Generator> {
  /**
   * Get the stack of the classes processed and generated by this stack.
   *
   * @return the stack of the classes processed and generated by this stack.
   */
  @NotNull ClassStack classStack();

  /**
   * Get the currently running generator.
   *
   * @return the currently running generator.
   * @throws NullPointerException if the stack has not yet started generating, so no current generator is present.
   */
  @NotNull Generator current();

  /**
   * Sets the current generator the stack is processing.
   *
   * @param generator the current generator.
   */
  void setCurrentGenerator(@NotNull Generator generator);

  /**
   * Get the currently processing type.
   *
   * @return the currently processing type.
   * @throws NullPointerException if the stack has not yet started generating, so no type is present.
   */
  @NotNull CtType<?> getType();

  /**
   * Sets the type the stack is currently processing.
   *
   * @param type the type.
   */
  void setCurrentType(@NotNull CtType<?> type);

  /**
   * Get the currently generating class.
   *
   * @return the currently generating class.
   * @throws NullPointerException if the stack has not yet started generating, so no class is present.
   */
  @NotNull CtClass getGeneratingClass();

  /**
   * Sets the currently generating class.
   *
   * @param ctClass the class.
   */
  void setGeneratingClass(@NotNull CtClass ctClass);
}
